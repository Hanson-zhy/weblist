文宇香香 - 文件管理业务逻辑层开发任务清单

职责范围：负责文件管理的业务逻辑处理、权限控制、数据验证、业务规则实现

**项目架构：**
- 业务逻辑层，处理文件操作的权限验证和规则检查
- 统一的数据格式和错误处理
- 支持管理员和普通用户的权限区分
- 实现文件操作的审计日志

**第一阶段：文件权限系统（第1-2周）**

**1.1 权限模型设计**
- **用户角色定义：**
```python
class UserRole:
    ADMIN = "admin"      # 管理员：所有权限
    USER = "user"        # 普通用户：只读权限
    
class Permission:
    READ = "read"        # 读取文件列表
    WRITE = "write"      # 上传、修改文件
    DELETE = "delete"    # 删除文件
    SHARE = "share"      # 分享文件
    ADMIN = "admin"      # 管理配置
```

**1.2 权限验证中间件**
- **权限检查装饰器：**
```python
def require_permission(permission):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            user_role = kwargs.get('user_role', 'user')
            if not check_permission(user_role, permission):
                raise PermissionError(f"需要{permission}权限")
            return func(*args, **kwargs)
        return wrapper
    return decorator

@require_permission(Permission.WRITE)
def upload_file(user_role, file_path, content):
    return process_upload(file_path, content)
```

**1.3 路径权限控制**
- **敏感路径保护：**
```python
PROTECTED_PATHS = [
    "/config",
    "/admin",
    "/system",
    "/logs"
]

def validate_path_access(user_role, path):
    """验证路径访问权限"""
    if user_role == UserRole.ADMIN:
        return True
    
    for protected_path in PROTECTED_PATHS:
        if path.startswith(protected_path):
            return False
    
    return True
```

**第二阶段：文件操作业务逻辑（第3-4周）**

**2.1 文件上传业务逻辑**
- **上传前验证：**
```python
class UploadValidator:
    def __init__(self, config):
        self.max_file_size = config.get('max_file_size', 2 * 1024 * 1024 * 1024)  # 2GB
        self.allowed_types = config.get('allowed_types', ['*'])
    
    def validate_upload(self, file_name, file_size, file_type):
        """验证上传文件"""
        errors = []
        
        # 文件大小检查
        if file_size > self.max_file_size:
            errors.append(f"文件大小超过限制：{file_size} > {self.max_file_size}")
        
        # 文件类型检查
        if self.allowed_types != ['*']:
            file_extension = file_name.split('.')[-1].lower()
            if file_extension not in self.allowed_types:
                errors.append(f"不支持的文件类型：{file_extension}")
        
        # 文件名安全检查
        if not self._is_safe_filename(file_name):
            errors.append("文件名包含非法字符")
        
        return {
            "valid": len(errors) == 0,
            "errors": errors
        }
    
    def _is_safe_filename(self, filename):
        """检查文件名安全性"""
        dangerous_chars = ['<', '>', ':', '"', '|', '?', '*']
        return not any(char in filename for char in dangerous_chars)
```

**2.2 文件操作服务**
- **统一文件操作接口：**
```python
class FileOperationService:
    def __init__(self, api_client, config):
        self.api = api_client
        self.config = config
        self.validator = UploadValidator(config)
    
    def upload_file(self, user_role, local_path, remote_path):
        """业务逻辑层文件上传"""
        try:
            # 权限检查
            if not check_permission(user_role, Permission.WRITE):
                raise PermissionError("没有上传权限")
            
            # 验证路径访问
            if not validate_path_access(user_role, remote_path):
                raise ValueError("无权限访问此路径")
            
            # 获取文件信息
            file_info = get_file_info(local_path)
            
            # 验证文件
            validation = self.validator.validate_upload(
                file_info['name'],
                file_info['size'],
                file_info['type']
            )
            
            if not validation['valid']:
                return {"success": False, "errors": validation['errors']}
            
            # 执行上传
            result = self.api.upload_file(local_path, remote_path)
            
            # 记录操作日志
            self._log_operation(user_role, "upload", remote_path, file_info)
            
            return {"success": True, "data": result}
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def delete_file(self, user_role, file_path):
        """业务逻辑层文件删除"""
        try:
            # 权限检查
            if not check_permission(user_role, Permission.DELETE):
                raise PermissionError("没有删除权限")
            
            # 验证路径访问
            if not validate_path_access(user_role, file_path):
                raise ValueError("无权限访问此路径")
            
            # 检查文件是否存在
            if not self._file_exists(file_path):
                raise FileNotFoundError("文件不存在")
            
            # 执行删除
            result = self.api.delete_file(file_path)
            
            # 记录操作日志
            self._log_operation(user_role, "delete", file_path)
            
            return {"success": True, "data": result}
            
        except Exception as e:
            return {"success": False, "error": str(e)}
```

**第三阶段：数据处理和转换（第5-6周）**

**3.1 数据格式化**
- **统一数据格式：**
```python
class DataFormatter:
    @staticmethod
    def format_file_list(raw_data):
        """格式化文件列表数据"""
        formatted = {
            "files": [],
            "folders": [],
            "total_count": 0,
            "total_size": 0
        }
        
        for item in raw_data.get('folder', []):
            formatted["folders"].append({
                "id": item.get("id"),
                "name": item.get("name"),
                "type": "folder",
                "size": 0,
                "modified": item.get("modified", ""),
                "path": item.get("path", "")
            })
        
        for item in raw_data.get('file', []):
            file_size = DataFormatter._parse_size(item.get("size", "0B"))
            formatted["files"].append({
                "id": item.get("id"),
                "name": item.get("name"),
                "type": "file",
                "size": file_size,
                "size_formatted": DataFormatter._format_size(file_size),
                "modified": item.get("modified", ""),
                "extension": DataFormatter._get_extension(item.get("name", ""))
            })
            formatted["total_size"] += file_size
        
        formatted["total_count"] = len(formatted["files"]) + len(formatted["folders"])
        return formatted
    
    @staticmethod
    def _parse_size(size_str):
        """解析文件大小字符串"""
        if isinstance(size_str, (int, float)):
            return size_str
        
        size_str = str(size_str).upper()
        multipliers = {'B': 1, 'KB': 1024, 'MB': 1024**2, 'GB': 1024**3, 'TB': 1024**4}
        
        for suffix, multiplier in multipliers.items():
            if size_str.endswith(suffix):
                return float(size_str.replace(suffix, "")) * multiplier
        
        return 0
    
    @staticmethod
    def _format_size(size_bytes):
        """格式化文件大小"""
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} PB"
```

**3.2 搜索和筛选**
- **高级搜索功能：**
```python
class FileSearchService:
    def __init__(self, api_client):
        self.api = api_client
    
    def search_files(self, user_role, path, keyword, filters=None):
        """搜索文件"""
        try:
            # 验证路径访问权限
            if not validate_path_access(user_role, path):
                return {"success": False, "error": "无权限访问此路径"}
            
            # 获取文件列表
            file_list = self.api.list_files(path)
            
            # 应用搜索条件
            results = self._apply_search_filters(file_list, keyword, filters)
            
            return {
                "success": True,
                "data": results,
                "total": len(results),
                "path": path,
                "keyword": keyword
            }
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _apply_search_filters(self, file_list, keyword, filters):
        """应用搜索筛选条件"""
        results = []
        
        for item in file_list.get('files', []) + file_list.get('folders', []):
            # 关键词匹配
            if keyword and keyword.lower() not in item.get('name', '').lower():
                continue
            
            # 文件类型筛选
            if filters and filters.get('type') and item.get('type') != filters['type']:
                continue
            
            # 文件大小筛选
            if filters and filters.get('size_min') and item.get('size', 0) < filters['size_min']:
                continue
            
            if filters and filters.get('size_max') and item.get('size', 0) > filters['size_max']:
                continue
            
            results.append(item)
        
        return results
```

**第四阶段：审计日志和监控（第7-8周）**

**4.1 操作日志系统**
- **日志记录器：**
```python
import logging
import json
from datetime import datetime

class AuditLogger:
    def __init__(self, log_file="audit.log"):
        self.logger = logging.getLogger("audit")
        self.logger.setLevel(logging.INFO)
        
        handler = logging.FileHandler(log_file)
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
    
    def log_operation(self, user_role, operation, path, details=None):
        """记录操作日志"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "user_role": user_role,
            "operation": operation,
            "path": path,
            "details": details or {}
        }
        
        self.logger.info(json.dumps(log_entry))
    
    def get_operation_history(self, user_role=None, operation=None, limit=100):
        """获取操作历史"""
        # 从日志文件中读取并筛选
        history = []
        try:
            with open("audit.log", "r") as f:
                lines = f.readlines()[-limit:]
                for line in lines:
                    try:
                        log_entry = json.loads(line.split(" - ")[-1])
                        if user_role and log_entry.get("user_role") != user_role:
                            continue
                        if operation and log_entry.get("operation") != operation:
                            continue
                        history.append(log_entry)
                    except:
                        continue
        except FileNotFoundError:
            pass
        
        return history
```

**4.2 统计和报表**
- **使用统计：**
```python
class UsageStatistics:
    def __init__(self, audit_logger):
        self.logger = audit_logger
    
    def get_storage_stats(self, user_role, path="/"):
        """获取存储统计"""
        try:
            file_list = self._get_file_list(path)
            
            stats = {
                "total_files": 0,
                "total_folders": 0,
                "total_size": 0,
                "file_types": {},
                "largest_files": [],
                "recent_files": []
            }
            
            for item in file_list:
                if item.get("type") == "file":
                    stats["total_files"] += 1
                    stats["total_size"] += item.get("size", 0)
                    
                    # 文件类型统计
                    ext = item.get("extension", "")
                    stats["file_types"][ext] = stats["file_types"].get(ext, 0) + 1
                    
                    # 最大文件
                    stats["largest_files"].append(item)
                    
                    # 最近文件
                    if self._is_recent(item.get("modified")):
                        stats["recent_files"].append(item)
                        
                elif item.get("type") == "folder":
                    stats["total_folders"] += 1
            
            # 排序最大文件
            stats["largest_files"] = sorted(
                stats["largest_files"], 
                key=lambda x: x.get("size", 0), 
                reverse=True
            )[:10]
            
            return {"success": True, "data": stats}
            
        except Exception as e:
            return {"success": False, "error": str(e)}
```

**技术规范：**

**依赖管理：**
```txt
# requirements.txt
python-dateutil>=2.8.2
pydantic>=1.8.2
typing-extensions>=3.10.0
```

**项目结构：**
```
business_logic/
├── __init__.py
├── services/
│   ├── __init__.py
│   ├── file_service.py
│   ├── search_service.py
│   └── audit_service.py
├── models/
│   ├── __init__.py
│   ├── permission.py
│   └── file_model.py
├── validators/
│   ├── __init__.py
│   └── upload_validator.py
├── utils/
│   ├── __init__.py
│   ├── data_formatter.py
│   └── file_utils.py
└── tests/
    ├── __init__.py
    ├── test_services.py
    └── test_validators.py
```

**API接口规范：**

**业务逻辑层接口：**
- **文件操作：**
  - POST /api/business/upload - 业务层文件上传
  - DELETE /api/business/delete - 业务层文件删除
  - GET /api/business/list - 带权限的文件列表
  - POST /api/business/search - 带权限的文件搜索

- **统计功能：**
  - GET /api/business/stats - 存储统计信息
  - GET /api/business/history - 操作历史记录
  - GET /api/business/usage - 使用统计

**测试要求：**
- **单元测试：**
  - 权限验证测试（100%覆盖）
  - 文件操作业务逻辑测试
  - 数据验证测试
  - 错误处理测试

- **集成测试：**
  - 权限控制端到端测试
  - 文件操作流程测试
  - 审计日志测试
  - 统计功能测试

**性能指标：**
- 权限验证延迟：<10ms
- 文件列表格式化：<100ms（1000个文件）
- 搜索响应时间：<500ms
- 日志写入延迟：<5ms

**交付物：**
1. 完整的业务逻辑层
2. 权限控制系统
3. 文件操作服务
4. 数据格式化工具
5. 审计日志系统
6. 统计报表功能
7. 单元测试套件
8. 接口文档和使用指南
9. 性能测试报告
10. 部署配置说明

**成功标准：**
- 权限控制准确率：100%
- 业务逻辑完整性：覆盖所有文件操作场景
- 数据一致性：100%准确
- 审计日志完整性：100%操作记录
- 测试覆盖率：>95%